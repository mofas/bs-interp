// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var Block      = require("bs-platform/lib/js/block.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");

function extendEnv(x, value, env) {
  return /* Env */[
          x,
          value,
          env
        ];
}

function handleMulti(v1, v2) {
  switch (v1.tag | 0) {
    case 0 : 
        switch (v2.tag | 0) {
          case 0 : 
              return /* Int */Block.__(0, [Caml_int32.imul(v1[0], v2[0])]);
          case 1 : 
          case 2 : 
              return /* Error */Block.__(1, ["type Mismatch in Multi"]);
          
        }
        break;
    case 1 : 
    case 2 : 
        return /* Error */Block.__(1, ["type Mismatch in Multi"]);
    
  }
}

function handlePlus(v1, v2) {
  switch (v1.tag | 0) {
    case 0 : 
        switch (v2.tag | 0) {
          case 0 : 
              return /* Int */Block.__(0, [v1[0] + v2[0] | 0]);
          case 1 : 
          case 2 : 
              return /* Error */Block.__(1, ["type Mismatch in Plus"]);
          
        }
        break;
    case 1 : 
    case 2 : 
        return /* Error */Block.__(1, ["type Mismatch in Plus"]);
    
  }
}

function interp(exp, env) {
  switch (exp.tag | 0) {
    case 0 : 
        return applyEnv(exp[0], env);
    case 1 : 
        return /* Int */Block.__(0, [exp[0]]);
    case 2 : 
        return handlePlus(interp(exp[0], env), interp(exp[1], env));
    case 3 : 
        return handleMulti(interp(exp[0], env), interp(exp[1], env));
    case 4 : 
        return /* Closure */Block.__(2, [
                  exp[0],
                  exp[1],
                  env
                ]);
    case 5 : 
        return applyClosure(interp(exp[0], env), interp(exp[1], env));
    
  }
}

function applyEnv(y, _env) {
  while(true) {
    var env = _env;
    if (env) {
      if (env[0] === y) {
        return /* Int */Block.__(0, [env[1]]);
      } else {
        _env = env[2];
        continue ;
        
      }
    } else {
      return /* Error */Block.__(1, ["Cannot find variable"]);
    }
  };
}

function applyClosure(v1, v2) {
  switch (v1.tag | 0) {
    case 0 : 
    case 1 : 
        return /* Error */Block.__(1, ["type Mismatch in Application"]);
    case 2 : 
        switch (v2.tag | 0) {
          case 0 : 
              return interp(v1[1], /* Env */[
                          v1[0],
                          v2[0],
                          v1[2]
                        ]);
          case 1 : 
          case 2 : 
              return /* Error */Block.__(1, ["type Mismatch in Application"]);
          
        }
        break;
    
  }
}

console.log(interp(/* Multi */Block.__(3, [
            /* Plus */Block.__(2, [
                /* Number */Block.__(1, [1]),
                /* Number */Block.__(1, [3])
              ]),
            /* Number */Block.__(1, [3])
          ]), /* EmptyEnv */0));

console.log(interp(/* Symbol */Block.__(0, ["x"]), /* Env */[
          "x",
          4,
          /* EmptyEnv */0
        ]));

console.log(interp(/* Application */Block.__(5, [
            /* Lambda */Block.__(4, [
                "x",
                /* Plus */Block.__(2, [
                    /* Symbol */Block.__(0, ["x"]),
                    /* Number */Block.__(1, [3])
                  ])
              ]),
            /* Number */Block.__(1, [5])
          ]), /* EmptyEnv */0));

exports.extendEnv    = extendEnv;
exports.handleMulti  = handleMulti;
exports.handlePlus   = handlePlus;
exports.interp       = interp;
exports.applyEnv     = applyEnv;
exports.applyClosure = applyClosure;
/*  Not a pure module */
